#!/usr/bin/perl
# -*- cperl -*-

=head1 NAME

apache_processes_scoreboard - Munin plugin to monitor the number of
apache processes scoreboard running on the machine.

=head1 APPLICABLE SYSTEMS

Apache HTTP servers with C</server-status> enabled.

=head1 CONFIGURATION

The plugin needs access to http://localhost/server-status?auto (or
modify the URL for another host). See your Apache documentation on
how to set up this URL in your httpd.conf.

Tip: To see if it's already set up correctly, just run this plugin
with the parameter "autoconf". If you get a "yes", everything should
work like a charm already.

This configuration section shows the defaults of the plugin:

  [apache_*]
     env.url   http://127.0.0.1:%d/server-status?auto
     env.host  example.com
     env.ports 80

The %d in the url will be replaced with the port.  The default port is
80 as shown.

The port list is a space separated list of ports.  NOTE that one
single Apache can have several open ports, and the plugin needs only
to contact one to get the servers global status.  The list of ports is
only needed if you have several B<different> Apaches configured on
your host.

If you need authenticated access to the URL you can specify the
username and password in the URL.  For example:

  [apache_processes_scoreboard]
     env.url http://munin:spamalot@localhost/server-status?auto

This will provide for HTTP basic authentication.

=head1 INTERPRETATION

The plugin shows the number of Apache processes scoreboard running
on the machine.

If there is a flat ceiling effect on the graph where the number of
servers does not increase any more, in spite of no idle servers, then
the server has probably reached its C<MaxClients> setting.  In this
case it's very likely that some clients are getting connection refused
or some other problem when connecting to your server.  In this case
increase the C<MaxClients> setting.  Unless there is also no more free
memory.

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf

=head1 BUGS

Does not support digest authentication.

=head1 VERSION

  $Id: $
  based on Id: apache_processes.in 3192 2009-12-05 21:11:54Z feiner.tom

=head1 AUTHOR

Naoya Nakazawa

=head1 LICENSE

GPLv2

=cut

use strict;
use warnings;
use Munin::Plugin;

my $ret = undef;
if (! eval "require LWP::UserAgent;") {
  $ret = "LWP::UserAgent not found";
  if ( ! defined $ARGV[0] ) {
    die $ret;
  }
}

my $URL = exists $ENV{'url'} ? $ENV{'url'} : "http://127.0.0.1:%d/server-status?auto";
my @PORTS = exists $ENV{'ports'} ? split(' ', $ENV{'ports'}) : (80);

if ( defined $ARGV[0] and $ARGV[0] eq "autoconf" ) {
  if ($ret) {
    print "no ($ret)\n";
    exit 0;
  }
  my $ua = LWP::UserAgent->new(timeout => 30);

  foreach my $port (@PORTS) {
    my $url = sprintf $URL, $port;
    my $req = HTTP::Request->new('GET', $url);
    $req->header('HOST', $ENV{'host'});
    my $response = $ua->request($req);
    if ($response->is_success) {
      if ($response->content =~ /^Total Accesses:/im ) {
        next;
      } else {
        print "no (ExtendedStatus option for apache" 
          . " mod_status is missing on port $port)\n";
        exit 0;
      }
    } elsif ($response->code == 404) {
      print "no (apache server-status not found. check if mod_status is enabled)\n";
      exit 0;
    } else {
      print "no (Port $port: ". $response->message .")\n";
      exit 0;
    }
  }
  print "yes\n";
  exit 0;
}

if ( defined $ARGV[0] and $ARGV[0] eq "config" ) {
  print "graph_title Apache processes scoreboard\n";
  print "graph_args --base 1000 -l 0\n";
  print "graph_category apache\n";
  print "graph_order ";
  foreach my $port (@PORTS) {
    print "wait$port starting$port reading$port sending$port keepalive$port dns$port closing$port logging$port gracefully$port idle$port open$port";
  }
  print "\n";
  print "graph_vlabel processes\n";
  print "graph_total total\n";
  foreach my $port (@PORTS) {
    print "wait$port.label Waiting for Connection $port\n";
    print "wait$port.draw AREA\n";
    print "wait$port.colour 4444ff\n";
    print "starting$port.label Starting up $port\n";
    print "starting$port.draw STACK\n";
    print "starting$port.colour 157419\n";
    print "reading$port.label Reading Request $port\n";
    print "reading$port.draw STACK\n";
    print "reading$port.colour 750f7d\n";
    print "sending$port.label Sendin Reply $port\n";
    print "sending$port.draw STACK\n";
    print "sending$port.colour 00ff00\n";
    print "keepalive$port.label Keepalived (read) $port\n";
    print "keepalive$port.draw STACK\n";
    print "keepalive$port.colour ff0000\n";
    print "dns$port.label DNS Lookup $port\n";
    print "dns$port.draw STACK\n";
    print "dns$port.colour 6dc8fe\n";
    print "closing$port.label Closing connection $port\n";
    print "closing$port.draw STACK\n";
    print "closing$port.colour ffab00\n";
    print "logging$port.label Logging $port\n";
    print "logging$port.draw STACK\n";
    print "logging$port.colour ffff00\n";
    print "gracefully$port.label Gracefully finishing $port\n";
    print "gracefully$port.draw STACK\n";
    print "gracefully$port.colour ff5576\n";
    print "idle$port.label Idle cleanup of worker $port\n";
    print "idle$port.draw STACK\n";
    print "idle$port.colour ff4105\n";
    print "open$port.label Open slot with no current process $port\n";
    print "open$port.draw STACK\n";
    print "open$port.colour d3d3d3\n";
  }
  foreach my $port (@PORTS) {
    foreach my $type qw "wait starting reading sending keepalive dns closing logging gracefully idle open" {
      print_thresholds("$type$port");
    }
  }
  exit 0;
}

foreach my $port (@PORTS) {
  my $ua = LWP::UserAgent->new(timeout => 30);
  my $url = sprintf $URL, $port;
  my $req = HTTP::Request->new('GET', $url);
  $req->header('HOST', $ENV{'host'});
  my $response = $ua->request($req);
  if ($response->content =~ /^(Scoreboard: .*)$/m) {
    my $scoreboard = $1;
    my $count_o = () = $scoreboard =~ /\./g;
    print "open$port.value $count_o\n";
    my $count_u = () = $scoreboard =~ /_/g;
    print "wait$port.value $count_u\n";
    my $count_s = () = $scoreboard =~ /S/g;
    print "starting$port.value $count_s\n";
    my $count_r = () = $scoreboard =~ /R/g;
    print "reading$port.value $count_r\n";
    my $count_w = () = $scoreboard =~ /W/g;
    print "sending$port.value $count_w\n";
    my $count_k = () = $scoreboard =~ /K/g;
    print "keepalive$port.value $count_k\n";
    my $count_d = () = $scoreboard =~ /D/g;
    print "dns$port.value $count_d\n";
    my $count_c = () = $scoreboard =~ /C/g;
    print "closing$port.value $count_c\n";
    my $count_l = () = $scoreboard =~ /L/g;
    print "logging$port.value $count_l\n";
    my $count_g = () = $scoreboard =~ /G/g;
    print "gracefully$port.value $count_g\n";
    my $count_i = () = $scoreboard =~ /I/g;
    print "idle$port.value $count_i\n";
  } else {
    foreach my $type qw "wait starting reading sending keepalive dns closing logging gracefully idle open" {
      print "$type$port.value U\n";
    }
  }
}
