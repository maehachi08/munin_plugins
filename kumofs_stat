#!/usr/bin/perl
# -*- cperl -*-

=head1 NAME

kumofs_status - Munin plugin to monitor the status of kumofs servers
at running on the machine.

=head1 APPLICABLE SYSTEMS

Require /usr/bin/kumostat command.

=head1 CONFIGURATION

Tip: To see if it's already set up correctly, just run this plugin
with the parameter "autoconf". If you get a "yes", everything should
work like a charm already.

This configuration section shows the default of the plugin:

  [kumofs_stat_*]
     env.kumostat /usr/bin/kumostat
     env.server   localhost:19800

env.server parameter is kumofs server address and ports.

  [kumofs_stat_*]
     env.server server1:19800 server2:19800 ...

This is a wildcard plugin. To monitor an kumofs status,
link kumofs_stat_<kumostat command> to this file. E.g.

  ln -s /usr/share/node/node/plugins-auto/kumofs_stat \
        /etc/munin/node.d/kumofs_stat_items

... will monitor kumofs stored items on kumo server.

=head1 INTERPRETATION

The plugin shows the status kumofs running on the machine.

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf

=head1 VERSION

  $Id: $

=head1 AUTHOR

Naoya Nakazawa

=head1 LICENSE

GPLv2

=cut

use strict;
use warnings;
use File::Basename;
use Munin::Plugin;

my $KUMOSTAT = exists $ENV{'kumostat'} ? $ENV{'kumostat'} : '/usr/bin/kumostat';
my @SERVERS = exists $ENV{'server'} ? split(' ', $ENV{'server'}) : 'localhost:19800';
my @command_name = split(/kumofs_stat_/, basename($0));
my $COMMAND = $command_name[$#command_name];

if ( defined $ARGV[0] and $ARGV[0] eq "autoconf" ) {
  if (not -x $KUMOSTAT) {
    print "no (require ($KUMOSTAT))\n";
    exit 1;
  }

  print "yes\n";
  exit 0;
}

if ( defined $ARGV[0] and $ARGV[0] eq "config" ) {
  print "graph_title kumofs $COMMAND\n";
  print "graph_args --base 1000 --lower-limit 0\n";
  print "graph_category kumofs\n";
  print "graph_order ";
  foreach my $server (@SERVERS) {
    print "$COMMAND$server ";
  }
  print "\n";
  print "graph_vlabel $COMMAND\n";
  my @colors = qw(90ee90 ffb6c1 ba55d3 7b68ee ff4500 b0e0e6);
  my $color_index = 0;
  foreach my $server (@SERVERS) {
    print "$COMMAND$server.label $COMMAND $server\n";
    my $color = $colors[$color_index];
    if ( $color ne '' ) {
      $color_index += 1;
      print "$COMMAND$server.colour $color\n";
    }
  }
  exit 0;
}

foreach my $server (@SERVERS) {
  my @val = map { chomp; $_ } (`$KUMOSTAT $server $COMMAND`);
  print "$COMMAND$server.value @val\n";
}
